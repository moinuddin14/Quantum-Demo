// <auto-generated>
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"quantum_console_demo\",\"Name\":\"HelloQ\"},\"Attributes\":[],\"SourceFile\":\"/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs\",\"Position\":{\"Item1\":7,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"quantum_console_demo\",\"Name\":\"HelloQ\"},\"Attributes\":[],\"SourceFile\":\"/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs\",\"Position\":{\"Item1\":7,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"Documentation\":[]}")]
#line hidden
namespace quantum_console_demo
{
    [SourceLocation("/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs", OperationFunctor.Body, 8, -1)]
    public partial class HelloQ : Operation<QVoid, QVoid>, ICallable
    {
        public HelloQ(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "HelloQ";
        String ICallable.FullName => "quantum_console_demo.HelloQ";
        protected ICallable MicrosoftQuantumExtensionsDiagnosticsDumpRegister
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> MicrosoftQuantumIntrinsicCNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 9 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            MicrosoftQuantumIntrinsicMessage.Apply("Hello quantum world!");
#line 11 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            var case00 = 0L;
#line 12 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            var case01 = 0L;
#line 13 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            var case02 = 0L;
#line 14 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            var case03 = 0L;
#line 19 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            foreach (var i in new QRange(1L, 1000L))
#line hidden
            {
#line hidden
                {
#line 40 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                    var qubits = Allocate.Apply(2L);
#line hidden
                    System.Runtime.ExceptionServices.ExceptionDispatchInfo __arg1__ = null;
                    try
                    {
#line 41 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicH.Apply(qubits[0L]);
#line 42 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicH.Apply(qubits[1L]);
#line 44 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicCNOT.Apply((qubits[0L], qubits[1L]));
#line 46 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumExtensionsDiagnosticsDumpRegister.Apply(("", qubits));
#line 48 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        var r1 = MicrosoftQuantumIntrinsicM.Apply(qubits[0L]);
#line 49 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        var r2 = MicrosoftQuantumIntrinsicM.Apply(qubits[1L]);
#line 51 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Qubit set {0} : ", i));
#line 52 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Value of 1st Qubit : {0}", r1));
#line 53 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Value of 2nd Qubit : {0}", r2));
#line 55 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        if (((r1 == Result.Zero) && (r2 == Result.Zero)))
                        {
#line 56 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                            case00 = (case00 + 1L);
                        }

#line 58 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        if (((r1 == Result.Zero) && (r2 == Result.One)))
                        {
#line 59 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                            case01 = (case01 + 1L);
                        }

#line 61 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        if (((r1 == Result.One) && (r2 == Result.Zero)))
                        {
#line 62 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                            case02 = (case02 + 1L);
                        }

#line 64 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        if (((r1 == Result.One) && (r2 == Result.One)))
                        {
#line 65 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                            case03 = (case03 + 1L);
                        }

#line 68 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
                        MicrosoftQuantumIntrinsicResetAll.Apply(qubits);
                    }
#line hidden
                    catch (Exception __arg2__)
                    {
                        __arg1__ = System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(__arg2__);
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__ != null)
                        {
                            __arg1__.Throw();
                        }

#line hidden
                        Release.Apply(qubits);
                    }
                }
            }

#line 73 "/Users/moin/Documents/quantum-computing-demo/quantum-console-demo/Operations.qs"
            MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Case 00 : {0} Case01 : {1} Case02 : {2} Case03 : {3}", case00, case01, case02, case03));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumExtensionsDiagnosticsDumpRegister = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Extensions.Diagnostics.DumpRegister<>));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicCNOT = this.Factory.Get<IUnitary<(Qubit,Qubit)>>(typeof(Microsoft.Quantum.Intrinsic.CNOT));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<HelloQ, QVoid, QVoid>(QVoid.Instance);
        }
    }
}